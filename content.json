{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://blog.dennys.ink","root":"/"},"pages":[{"title":"关于","date":"2021-02-23T10:44:03.916Z","updated":"2021-02-23T10:44:03.910Z","comments":false,"path":"about/index.html","permalink":"http://blog.dennys.ink/about/index.html","excerpt":"","text":"说不出个屁 但能写出戏"},{"title":"标签","date":"2021-02-22T08:16:41.458Z","updated":"2021-02-22T08:12:54.347Z","comments":false,"path":"tags/index.html","permalink":"http://blog.dennys.ink/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-02-22T08:16:41.429Z","updated":"2021-02-22T08:12:54.346Z","comments":false,"path":"categories/index.html","permalink":"http://blog.dennys.ink/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"优雅的使用设计模式-观察者模式","slug":"2021-02-26_1","date":"2021-02-26T06:26:32.000Z","updated":"2021-02-26T09:13:22.742Z","comments":true,"path":"2021/02/26/2021-02-26_1/","link":"","permalink":"http://blog.dennys.ink/2021/02/26/2021-02-26_1/","excerpt":"","text":"观察者模式观察者模式（Observer），定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新，其主要解决一个对象状态改变给其他关联对象通知的问题，保证易用和低耦合。 下面举个栗子日常系统中的用户注册功能，通常注册完了会给其账号发放对应的优惠券或者邀请码，一般刚开始写代码的时候我们可能都会把发优惠券和发放邀请码的业务注入到注册逻辑中执行，例如下面的写法 123456789101112131415161718192021222324252627/** * @author denny * @ClassName UserRegServiceImpl * @Description 用户注册实现类 * @createTime 2021-02-26 */@Slf4j@Servicepublic class UserRegServiceImpl implements UserRegService &#123; @Autowired private CouponService couponService; @Autowired private InvitationCodeService invitationCodeService; public void reg(String username) &#123; //注册业务 log.info(&quot;&#123;&#125;注册成功&quot;, username); //注册成功发优惠券 couponService.addCoupon(); //发邀请码 invitationCodeService.sendInvitationCode(); &#125;&#125; 这样的写法对于业务处理来说也没啥问题无非就是会把优惠券和邀请码的一些业务耦合进来，当然像这样场景的松耦合用MQ也是可以处理的，本节我们先着重用观察者模式来演示下松耦合。 1.创建一个接口UserRegService123456789101112/** * @author denny * @ClassName UserRegService * @Description 用户注册 * @createTime 2021-02-26 */public interface UserRegService &#123; void reg(String username);&#125; 2.创建一个事件UserRegEvent继承ApplicationEvent来实现我们的自定义事件1234567891011121314151617181920212223242526272829303132/** * @author denny * @ClassName UserRegEvent * @Description 用户注册事件 * @createTime 2021-02-26 */public class UserRegEvent extends ApplicationEvent &#123; /** * 用户名 */ private String username; /** * Constructs a prototypical Event. * * @param source The object on which the Event initially occurred. * @throws IllegalArgumentException if source is null. */ public UserRegEvent(Object source) &#123; super(source); &#125; public UserRegEvent(Object source, String username) &#123; super(source); this.username = username; &#125; public String getUsername() &#123; return username; &#125;&#125; 3.接下来创建一个接口实现类UserRegServiceImpl实现我们的注册Service和ApplicationEventPublisherAware通过实现它，来发布变更事件1234567891011121314151617181920212223242526/** * @author denny * @ClassName UserRegServiceImpl * @Description 用户注册实现类 * @createTime 2021-02-26 */@Slf4j@Servicepublic class UserRegServiceImpl implements ApplicationEventPublisherAware, UserRegService &#123; private ApplicationEventPublisher applicationEventPublisher; public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) &#123; this.applicationEventPublisher = applicationEventPublisher; &#125; public void reg(String username) &#123; //注册 log.info(&quot;&#123;&#125;注册成功&quot;, username); //发布 log.info(&quot;发布注册成功事件&quot;); applicationEventPublisher.publishEvent(new UserRegEvent(this, username)); &#125; &#125; 4.分别创建一个用于发送新人优惠券和发送邀请码的处理类InvitationCodeManager、CouponManager，其中InvitationCodeManager实现了ApplicationEventListener通过实现它，来监听指定类型事件并响应动作，CouponManager我们使用另一种监听方式用注解@EventListener来实现监听1234567891011121314151617181920212223242526272829303132333435/** * @author denny * @ClassName InvitationCodeManager * @Description 发放邀请码 * @createTime 2021-02-26 */@Slf4j@Servicepublic class InvitationCodeManager implements ApplicationListener&lt;UserRegEvent&gt; &#123; public void onApplicationEvent(UserRegEvent userRegEvent) &#123; log.info(&quot;&#123;&#125;注册成功，开始发放邀请码...&quot;, userRegEvent.getUsername()); &#125;&#125;/** * @author denny * @ClassName CouponManager * @Description 发送新人优惠券 * @createTime 2021-02-26 */@Slf4j@Servicepublic class CouponManager &#123; @EventListener public void addCoupon(UserRegEvent userRegEvent) &#123; log.info(&quot;&#123;&#125;注册成功，开始发送新人优惠券...&quot;, userRegEvent.getUsername()); &#125;&#125; 5.上单测运行一下看看效果～12345678910111213@SpringBootTestclass DesignPatternApplicationTests &#123; @Resource private UserRegService userRegService; @Test void contextLoads() &#123; userRegService.reg(&quot;Denny&quot;); &#125;&#125; 6.运行结果控制台输出对应日志","categories":[{"name":"Java","slug":"Java","permalink":"http://blog.dennys.ink/categories/Java/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://blog.dennys.ink/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"博客刚开通","slug":"博客刚开通","date":"2021-02-25T03:25:51.000Z","updated":"2021-02-25T03:25:51.175Z","comments":true,"path":"2021/02/25/博客刚开通/","link":"","permalink":"http://blog.dennys.ink/2021/02/25/%E5%8D%9A%E5%AE%A2%E5%88%9A%E5%BC%80%E9%80%9A/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://blog.dennys.ink/categories/Java/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://blog.dennys.ink/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]}